let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

packadd! comment
" packadd! editorconfig

runtime ftplugin/man.vim

filetype plugin indent on
syntax on
let mapleader = " "
set viminfo+=n~/.config/vim/viminfo

augroup ColorschemeCustom
    au!
    au Colorscheme * hi Normal ctermbg=NONE guibg=NONE | hi default link Normal NonText
augroup END
colorscheme retrobox

nnoremap <leader>l <C-^>
nnoremap <leader>n <cmd>bn<cr>
nnoremap <leader>p <cmd>bp<cr>
nnoremap <leader>o o<esc>
nnoremap <leader>O O<esc>
nnoremap <leader>m <cmd>ls<CR>:b<Space>
nnoremap <leader>M <cmd>ls<CR>:bd<Space>
noremap <leader>/ <cmd>set hlsearch!<cr>
noremap <C-l> <C-l><cmd>nohlsearch<cr><cmd>match<cr><cmd>diffupdate<cr>
nnoremap <S-Tab> <C-o>
noremap <C-j> <C-d>
noremap <C-k> <C-u>
noremap j gj
noremap k gk
noremap gj j
noremap gk k
noremap <leader>f <cmd>FZF<cr>
tnoremap <C-n> <C-\><C-n>
noremap <leader>q <cmd>stop<cr>
noremap <leader>e <cmd>wqa<cr>
noremap <C-S-Left> <C-W>>
noremap <C-S-Right> <C-W><
noremap <C-S-Up> <C-W>+
noremap <C-S-Down> <C-W>-
noremap <leader>s "-
noremap <leader>r <cmd>registers<cr>
noremap <leader>ww <cmd>w<cr>
noremap <leader>wa <cmd>wa<cr>
noremap <leader>co <cmd>copen<cr>
noremap <leader>cw <cmd>cwindow<cr>
noremap <leader>cc <cmd>cclose<cr>
noremap <leader>cl <cmd>cc<cr>
noremap <leader>cn <cmd>cnext<cr>
noremap <leader>cp <cmd>cprev<cr>
noremap <leader>cb <cmd>cabove<cr>
noremap <leader>cu <cmd>cbelow<cr>
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
inoremap <expr> <C-Y> pumvisible() ? "\<CR>" : "\<C-Y>"

set laststatus=2 number relativenumber ruler cursorline showcmd mouse=a title background=dark
set wildmenu completeopt=menuone,popup,fuzzy,longest wildignorecase wildoptions=pum pumheight=25 keywordprg=:Man
set expandtab tabstop=4 softtabstop=4 shiftwidth=4 shiftround smarttab smartindent autoindent
set nohlsearch incsearch ignorecase smartcase
set nolazyredraw termguicolors signcolumn=number omnifunc=syntaxcomplete#Complete
set linebreak scrolloff=10 wrap nostartofline cpoptions+=n nofoldenable foldlevelstart=99 foldmethod=manual showbreak=>>>\ 
set autoread autowrite backspace=indent,eol,start
set backupcopy=auto backup writebackup backupdir=~/.cache/vim/backup dir=~/.cache/vim/swap
set undofile undodir=~/.cache/vim/undo
set hidden history=1000 sessionoptions-=options,folds
set encoding=utf8 ffs=unix,dos,mac nrformats-=octal
let &statusline=" %f%m%r%h %w%y %= CWD: %{pathshorten(substitute(getcwd(winnr()),$HOME,'~',''),4)}  (%l,%c) [%p%%,%P]"
set showmatch matchtime=1 matchpairs+=<:> ttimeoutlen=0

let LspServers = ([#{name: 'clangd',
                \   filetype: ['c', 'cpp'],
                \   path: '/bin/clangd',
                \   args: [
                \'--background-index', 
                \'--clang-tidy', 
                \'--pch-storage=memory',
                \'--malloc-trim',
                \'--background-index-priority=background',
                \'--completion-style=detailed'
                \]
                \ }])
let LspOptions = (#{
            \autoComplete: v:false,
            \useBufferCompletion: v:true,
            \filterCompletionDuplicates: v:true,
            \semanticHighlight: v:true,
            \usePopupInCodeAction: v:true,
            \})

function! s:OnLspAttach()
	setlocal tagfunc=lsp#lsp#TagFunc
    augroup LspCustom
        au!
        au BufWritePre <buffer> execute "LspFormat"
    augroup END

    noremap <buffer> <leader>g <cmd>LspDiag current<cr>
    noremap <buffer> <leader>= <cmd>LspFormat<cr>
    noremap <buffer> <leader>i <cmd>LspHover<cr>
    noremap <buffer> <leader>h <cmd>LspSwitchSourceHeader<cr>
    noremap <buffer> <leader>a <cmd>LspCodeAction<cr>
endfunction

let c_no_curly_error = 1 " disable error highlight for c compound literals
let g:ft_man_no_sect_fallback = 1
let g:local_vimrc = {'cache_file': $HOME."/.cache/vim/local_vimrc_cache"}

command! -nargs=* -complete=file Make make! <args>
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                \ | wincmd p | diffthis

augroup Custom
    au!
    au FileType * set formatoptions+=j formatoptions-=cro
    au FileType c,cpp set matchpairs+==:;
    au FileType c,cpp ++once if !exists('g:termdebug_loaded') | packadd termdebug | packadd lsp | endif
    au FileType qf 
                \if &buftype ==? "quickfix" |
                \   nnoremap <buffer> q <cmd>quit<cr> |
                \   nnoremap <buffer> <C-q> q |
                \endif
    au CmdWinEnter * nnoremap <nowait> <buffer> q <cmd>quit<cr> | nnoremap <nowait> <buffer> <C-q> q
    " au BufEnter * if &buftype !=?
    au User LspSetup ++once 
                \call LspOptionsSet(LspOptions) |
                \call LspAddServer(LspServers) |
                \au User LspAttached call <SID>OnLspAttach()
    " restore last cursor position (taken from defaults.vim)
    au BufReadPost * 
                \   let line = line("'\"")
                \ | if line >= 1 && line <= line("$") && &filetype !~# 'commit'
                \           && index(['xxd', 'gitrebase'], &filetype) == -1
                \ |     execute "normal! g`\""
                \ | endif
                \ | unlet line
    au BufRead,BufNewFile *.h set filetype=c
    au VimResume * checktime
    au VimResized * wincmd =
    autocmd VimLeave * if v:this_session != "" | mksession! | endif
    au TextYankPost * if v:event.regname ==? "-" | 
                \call job_start(['sh', '-c', 
                \'xclip -i -rmlastnl -selection clipboard <<< "' . @- . '"']) |
                \endif
augroup END
